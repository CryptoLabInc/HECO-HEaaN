#include <gtest/gtest.h>
#include <include/ast_opt/ast/Ast.h>
#include <include/ast_opt/visitor/CompileTimeExpressionSimplifier.h>
#include <include/ast_opt/visitor/RuntimeVisitor.h>
#include "AstTestingGenerator.h"

TEST(RuntimeVisitorTests, rtCheck) { /* NOLINT */
  /*
    VecInt2D runLaplacianSharpeningAlgorithm(Vector<int> img, int imgSize) {
      Matrix<int> img2;
      for (int x = 1; x < imgSize - 1; ++x) {
          for (int y = 1; y < imgSize - 1; ++y) {
             img2[imgSize*x+y] = img[imgSize*x+y] - (
                     + img[imgSize*(x-1)+y-1] + img[imgSize*x+y-1]        + img[imgSize*(x+1)+y-1]
                     + img[imgSize*(x-1)+y]   + img[imgSize*x+y] * (-8)   + img[imgSize*(x+1)+y]
                     + img[imgSize*(x-1)+y+1] + img[imgSize*x+y+1]        + img[imgSize*(x+1)+y+1] ) / 2;
          }
      }
      return img2;
   }
   */

  Ast ast;
  // Laplacian example with inner loops only
  AstTestingGenerator::generateAst(60, ast);

  CompileTimeExpressionSimplifier ctes(CtesConfiguration(2));
  ctes.visit(ast);

  // a 32x32 image passed as single 1'024 elements row vector
  auto imgData =
      new Matrix<int>(
          {{2, 95, 73, 85, 76, 12, 81, 63, 26, 72, 52, 17, 94, 35, 47, 34, 92, 20, 18, 32, 38, 47, 15, 62, 58, 49, 77,
            51, 52, 50, 93, 9, 94, 34, 59, 1, 70, 19, 3, 77, 95, 69, 45, 38, 75, 58, 60, 1, 21, 27, 50, 46, 51, 95, 13,
            3, 18, 19, 76, 78, 68, 19, 94, 64, 40, 83, 8, 84, 57, 47, 12, 56, 20, 21, 7, 87, 81, 92, 43, 54, 55, 74, 49,
            62, 53, 29, 3, 89, 7, 56, 14, 79, 21, 8, 13, 22, 84, 7, 2, 72, 80, 27, 65, 54, 77, 87, 72, 49, 60, 95, 22,
            53, 87, 49, 98, 84, 19, 28, 83, 27, 31, 9, 65, 72, 71, 85, 6, 36, 74, 34, 38, 9, 37, 92, 93, 27, 55, 87, 60,
            75, 31, 93, 67, 78, 29, 81, 88, 51, 51, 63, 53, 82, 85, 57, 18, 48, 84, 64, 3, 94, 46, 3, 71, 56, 25, 67,
            100, 75, 1, 21, 76, 64, 46, 45, 41, 81, 73, 38, 68, 73, 96, 42, 58, 59, 6, 91, 69, 81, 38, 58, 12, 90, 64,
            39, 48, 43, 10, 54, 92, 100, 67, 75, 93, 64, 81, 3, 44, 36, 53, 36, 50, 69, 38, 61, 70, 88, 41, 15, 28, 50,
            40, 18, 88, 16, 97, 7, 82, 39, 86, 11, 74, 57, 57, 65, 67, 43, 98, 93, 63, 44, 69, 53, 79, 21, 48, 99, 37,
            8, 15, 91, 22, 51, 64, 48, 13, 75, 6, 55, 88, 11, 6, 54, 47, 77, 38, 6, 17, 1, 41, 44, 40, 97, 4, 48, 35,
            49, 34, 57, 100, 99, 63, 86, 3, 11, 8, 97, 51, 95, 80, 79, 89, 23, 14, 61, 43, 84, 8, 68, 82, 42, 28, 85,
            63, 57, 68, 87, 74, 27, 19, 79, 51, 2, 58, 93, 80, 82, 64, 95, 90, 47, 42, 35, 27, 17, 21, 92, 100, 3, 98,
            6, 38, 76, 92, 15, 18, 80, 93, 73, 85, 25, 19, 21, 66, 16, 31, 74, 54, 61, 84, 55, 48, 29, 99, 66, 40, 63,
            32, 65, 59, 35, 94, 32, 18, 44, 58, 55, 29, 38, 60, 26, 83, 90, 59, 21, 71, 81, 33, 76, 28, 82, 85, 27, 49,
            1, 45, 59, 92, 34, 76, 80, 69, 39, 89, 91, 55, 28, 77, 85, 15, 52, 59, 78, 95, 95, 49, 23, 15, 51, 15, 53,
            44, 27, 58, 42, 9, 81, 10, 5, 1, 14, 95, 56, 91, 17, 49, 16, 67, 6, 52, 97, 91, 92, 45, 77, 99, 92, 28, 54,
            88, 69, 80, 83, 15, 84, 71, 68, 3, 17, 9, 6, 94, 91, 78, 29, 35, 18, 5, 2, 96, 7, 57, 64, 58, 55, 27, 95,
            50, 7, 76, 71, 30, 73, 87, 86, 81, 89, 15, 98, 16, 11, 35, 93, 14, 10, 83, 50, 18, 100, 81, 18, 66, 8, 21,
            58, 11, 77, 10, 6, 61, 26, 43, 6, 78, 36, 63, 68, 43, 40, 65, 47, 65, 11, 74, 8, 64, 67, 64, 37, 80, 52, 57,
            43, 11, 16, 70, 2, 75, 36, 23, 69, 34, 86, 59, 50, 56, 89, 13, 72, 96, 80, 16, 51, 94, 85, 94, 62, 67, 94,
            79, 56, 9, 94, 94, 96, 100, 25, 42, 66, 23, 28, 2, 31, 53, 42, 44, 76, 28, 48, 53, 57, 100, 100, 37, 34, 89,
            12, 9, 24, 3, 68, 35, 83, 97, 65, 48, 56, 41, 82, 69, 37, 74, 45, 4, 7, 63, 67, 80, 23, 33, 57, 74, 58, 54,
            7, 75, 83, 25, 100, 6, 53, 54, 1, 7, 88, 84, 28, 64, 78, 89, 80, 38, 91, 30, 62, 14, 98, 21, 58, 71, 64, 49,
            53, 31, 71, 69, 34, 34, 28, 5, 32, 74, 64, 72, 78, 61, 93, 90, 74, 54, 26, 86, 81, 20, 47, 42, 7, 92, 76,
            35, 2, 75, 68, 62, 79, 37, 23, 99, 23, 47, 49, 18, 24, 73, 80, 81, 30, 31, 72, 61, 28, 59, 81, 86, 98, 61,
            81, 2, 41, 86, 50, 94, 34, 86, 56, 86, 46, 56, 18, 29, 37, 1, 90, 13, 48, 35, 68, 100, 94, 78, 25, 70, 10,
            82, 34, 27, 34, 4, 36, 34, 37, 76, 77, 87, 28, 25, 96, 67, 8, 86, 54, 93, 25, 62, 27, 10, 68, 3, 53, 67, 71,
            82, 99, 54, 4, 87, 16, 10, 7, 56, 10, 90, 66, 31, 98, 7, 99, 38, 72, 63, 84, 27, 34, 14, 95, 70, 4, 50, 48,
            54, 71, 92, 56, 75, 57, 63, 83, 38, 36, 72, 36, 32, 98, 87, 26, 94, 50, 62, 50, 57, 87, 66, 50, 42, 65, 36,
            13, 9, 83, 92, 61, 34, 23, 75, 33, 81, 22, 23, 61, 13, 17, 22, 53, 13, 12, 44, 75, 17, 15, 89, 40, 67, 14,
            4, 98, 43, 99, 7, 14, 46, 66, 72, 13, 97, 38, 81, 62, 40, 98, 37, 20, 66, 10, 84, 44, 11, 10, 80, 73, 13,
            82, 66, 26, 96, 56, 57, 30, 31, 79, 67, 19, 28, 52, 30, 51, 33, 70, 68, 12, 97, 88, 29, 75, 60, 21, 35, 35,
            77, 36, 98, 28, 82, 10, 69, 14, 59, 38, 78, 31, 17, 75, 25, 26, 16, 29, 59, 46, 100, 1, 27, 84, 56, 17, 66,
            52, 18, 26, 84, 72, 84, 86, 9, 8, 82, 86, 52, 84, 50, 82, 22, 91, 97, 46, 74, 89, 91, 67, 32, 57, 94, 69,
            18, 55, 27, 89, 6, 25, 81, 90, 20, 1, 31, 3, 24, 1, 25, 79, 79, 92, 8, 33, 31, 68, 21, 24, 50, 68, 5, 64,
            45, 47, 54, 48, 36, 75, 97, 74, 53, 29, 48, 27, 86, 30, 44, 4, 36, 27, 21, 20, 26, 62, 72, 68, 19, 99, 19,
            19, 82, 52, 64, 90, 77, 39, 71, 5, 25, 10, 20, 46, 14, 100, 28, 100, 52, 89, 35, 82, 11, 41, 76, 15, 37, 25,
            45, 93, 16, 74, 61, 9, 44, 61, 37, 65, 78, 10}});
  RuntimeVisitor rt({{"img", new LiteralInt(imgData)}, {"imgSize", new LiteralInt(32)}});
  rt.visit(ast);
}
