#ifndef AST_OPTIMIZER_TEST_ASTTESTINGGENERATOR_H_
#define AST_OPTIMIZER_TEST_ASTTESTINGGENERATOR_H_

#include <cstddef>
#include "heco/ast/AbstractNode.h"

/// The ASTs generated by this class are used for tests. Hence, any modifications will break the tests!
class AstTestingGenerator
{
public:
  /// Generates a new demo AST.
  /// \param id The ID of the demo AST to generate.
  /// \param ast The AST object in which the demo AST is written into.
  static void generateAst(int id, AbstractNode &ast);

  /// Returns the largest ID that is supported by method generateAst.
  /// \return An integer specifying the largest ID supported by generateAst.
  static size_t getLargestId();

  /** @defgroup astGenerators Methods that generate sample ASTs (e.g., for testing).
   *  @{
   */
  static void genSuperSimpleAst(AbstractNode &ast);

  static void genAstRewritingOne(AbstractNode &ast);

  static void genAstRewritingTwo(AbstractNode &ast);

  static void genAstRewritingThree(AbstractNode &ast);

  static void genAstRewritingFour(AbstractNode &ast);

  static void genAstRewritingFive(AbstractNode &ast);

  static void genAstRewritingSix(AbstractNode &ast);

  static void genAstEvalOne(AbstractNode &ast);

  static void genAstEvalTwo(AbstractNode &ast);

  static void genAstEvalThree(AbstractNode &ast);

  static void genAstEvalFour(AbstractNode &ast);

  static void genAstEvalFive(AbstractNode &ast);

  static void genAstEvalSix(AbstractNode &ast);

  static void genAstEvalSeven(AbstractNode &ast);

  static void genAstPrintVisitorOne(AbstractNode &ast);

  static void genAstPrintVisitorTwo(AbstractNode &ast);

  static void genAstMultDepthOne(AbstractNode &ast);

  static void genAstMultDepthTwo(AbstractNode &ast);

  static void genAstRewritingSimple(AbstractNode &ast);

  static void genAstRewritingSimpleExtended(AbstractNode &ast);

  static void genAstRewritingMultiInputY(AbstractNode &ast);

  static void genAstRewritingTwoDepth2ConesButSingleVNode(AbstractNode &ast);

  static void genAstForSecretTaintingWithMultipleNonSequentialStatements(AbstractNode &ast);

  static void genAstIncludingForStatement(AbstractNode &ast);

  static void genAstUsingRotation(AbstractNode &ast);

  static void genAstRotateAndSum(AbstractNode &ast);

  static void genAstTranspose(AbstractNode &ast);

  static void genAstUsingMatrixElements(AbstractNode &ast);

  static void genAstCombineMatricesInt(AbstractNode &ast);

  static void genAstCombineMatricesFloat(AbstractNode &ast);

  static void genAstCombineMatricesBool(AbstractNode &ast);

  static void genAstCombineMatricesString(AbstractNode &ast);

  static void genAstCrossProduct(AbstractNode &ast);

  static void genSimpleMatrix(AbstractNode &ast);

  static void genAstFlipMatrixElements(AbstractNode &ast);

  static void genAstOperatorExpr_fullyEvaluable(AbstractNode &ast);

  static void genAstIncludingIfStatement(AbstractNode &ast);

  static void genAstOperatorExpr_partiallyEvaluable(AbstractNode &ast);

  static void genAstOperatorExpr_logicalAndFalse(AbstractNode &ast);

  static void genAstOperatorExpr_logicalAndTrue_oneRemainingOperand(AbstractNode &ast);

  static void genAstOperatorExpr_logicalAndTrue_twoRemainingOperands(AbstractNode &ast);

  static void genAstOperatorExpr_logicalOrTrue(AbstractNode &ast);

  static void genAstOperatorExpr_logicalOrFalse_oneRemainingOperand(AbstractNode &ast);

  static void genAstOperatorExpr_logicalOrFalse_twoRemainingOperands(AbstractNode &ast);

  static void genAstOperatorExpr_logicalXorTrue(AbstractNode &ast);

  static void genAstOperatorExpr_logicalXorFalse_oneRemainingOperand(AbstractNode &ast);

  static void genAstOperatorExpr_logicalXorFalse_twoRemainingOperands(AbstractNode &ast);

  static void genAstNestedOperatorExpr(AbstractNode &ast);

  static void genAstSimpleForLoopUnrolling(AbstractNode &ast);

  static void genAstNestedLoopUnrollingLaplacianSharpeningFilterInnerLoops(AbstractNode &ast);

  static void genAstMatrixAssignment(AbstractNode &ast);

  static void genAstMatrixPermutation(AbstractNode &ast);

  static void genAstGetMatrixSizeOfKnownMatrix(AbstractNode &ast);

  static void genAstGetMatrixSizeOfAbstractMatrix(AbstractNode &ast);

  static void genAstGetMatrixSizeOfUnknownMatrix(AbstractNode &ast);

  static void genAstMatrixAssignmAndGetMatrixSize(AbstractNode &ast);

  static void genAstMatrixAssignmUnknownThenKnown(AbstractNode &ast);

  static void genAstMatrixAssignmentKnownThenUnknown(AbstractNode &ast);

  static void genAstFullAssignmentToMatrix(AbstractNode &ast);

  static void genAstMatrixAssignmIncludingPushBack(AbstractNode &ast);

  static void genAstNestedLoopUnrollingLaplacianSharpeningFilterAllLoops(AbstractNode &ast);

  static void genAstNestedLoopUnrollingLaplacianSharpeningFilterInnerLoopsWithNonStdWeights(AbstractNode &ast);

  static void genAstPublicTurnedSecret(AbstractNode &ast);

  static void genAstPublicTurnedSecretMatrix(AbstractNode &ast);

  /** @} */ // End of astGenerators group

  //  static void genLaplacianInnerLoopsOnlyAstWithCustomWeights(AbstractNode &ast, Matrix<int> *weights);
};

#endif // AST_OPTIMIZER_TEST_ASTTESTINGGENERATOR_H_
