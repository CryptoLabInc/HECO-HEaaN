#ifndef AST_OPTIMIZER_TEST_ASTTESTINGGENERATOR_H_
#define AST_OPTIMIZER_TEST_ASTTESTINGGENERATOR_H_

#include <ast_opt/ast/Matrix.h>
#include "ast_opt/ast/Ast.h"

/// The ASTs generated by this class are used for tests. Hence, any modifications will break the tests!
class AstTestingGenerator {
 public:
  /// Generates a new demo AST.
  /// \param id The ID of the demo AST to generate.
  /// \param ast The AST object in which the demo AST is written into.
  static void generateAst(int id, Ast &ast);

  /// Returns the largest ID that is supported by method generateAst.
  /// \return An integer specifying the largest ID supported by generateAst.
  static size_t getLargestId();

  /** @defgroup astGenerators Methods that generate sample ASTs (e.g., for testing).
  *  @{
  */
  static void genSuperSimpleAst(Ast &ast);

  static void genAstRewritingOne(Ast &ast);

  static void genAstRewritingTwo(Ast &ast);

  static void genAstRewritingThree(Ast &ast);

  static void genAstRewritingFour(Ast &ast);

  static void genAstRewritingFive(Ast &ast);

  static void genAstRewritingSix(Ast &ast);

  static void genAstEvalOne(Ast &ast);

  static void genAstEvalTwo(Ast &ast);

  static void genAstEvalThree(Ast &ast);

  static void genAstEvalFour(Ast &ast);

  static void genAstEvalFive(Ast &ast);

  static void genAstEvalSix(Ast &ast);

  static void genAstEvalSeven(Ast &ast);

  static void genAstPrintVisitorOne(Ast &ast);

  static void genAstPrintVisitorTwo(Ast &ast);

  static void genAstMultDepthOne(Ast &ast);

  static void genAstMultDepthTwo(Ast &ast);

  static void genAstRewritingSimple(Ast &ast);

  static void genAstRewritingSimpleExtended(Ast &ast);

  static void genAstRewritingMultiInputY(Ast &ast);

  static void genAstRewritingTwoDepth2ConesButSingleVNode(Ast &ast);

  static void genAstForSecretTaintingWithMultipleNonSequentialStatements(Ast &ast);

  static void genAstIncludingForStatement(Ast &ast);

  static void genAstUsingRotation(Ast &ast);

  static void genAstRotateAndSum(Ast &ast);

  static void genAstTranspose(Ast &ast);

  static void genAstUsingMatrixElements(Ast &ast);

  static void genAstCombineMatricesInt(Ast &ast);

  static void genAstCombineMatricesFloat(Ast &ast);

  static void genAstCombineMatricesBool(Ast &ast);

  static void genAstCombineMatricesString(Ast &ast);

  static void genAstCrossProduct(Ast &ast);

  static void genSimpleMatrix(Ast &ast);

  static void genAstFlipMatrixElements(Ast &ast);

  static void genAstOperatorExpr_fullyEvaluable(Ast &ast);

  static void genAstIncludingIfStatement(Ast &ast);

  static void genAstOperatorExpr_partiallyEvaluable(Ast &ast);

  static void genAstOperatorExpr_logicalAndFalse(Ast &ast);

  static void genAstOperatorExpr_logicalAndTrue_oneRemainingOperand(Ast &ast);

  static void genAstOperatorExpr_logicalAndTrue_twoRemainingOperands(Ast &ast);

  static void genAstOperatorExpr_logicalOrTrue(Ast &ast);

  static void genAstOperatorExpr_logicalOrFalse_oneRemainingOperand(Ast &ast);

  static void genAstOperatorExpr_logicalOrFalse_twoRemainingOperands(Ast &ast);

  static void genAstOperatorExpr_logicalXorTrue(Ast &ast);

  static void genAstOperatorExpr_logicalXorFalse_oneRemainingOperand(Ast &ast);

  static void genAstOperatorExpr_logicalXorFalse_twoRemainingOperands(Ast &ast);

  static void genAstNestedOperatorExpr(Ast &ast);

  static void genAstSimpleForLoopUnrolling(Ast &ast);

  static void genAstNestedLoopUnrollingLaplacianSharpeningFilterInnerLoops(Ast &ast);

  static void genAstMatrixAssignment(Ast &ast);

  static void genAstMatrixPermutation(Ast &ast);

  static void genAstGetMatrixSizeOfKnownMatrix(Ast &ast);

  static void genAstGetMatrixSizeOfAbstractMatrix(Ast &ast);

  static void genAstGetMatrixSizeOfUnknownMatrix(Ast &ast);

  static void genAstMatrixAssignmAndGetMatrixSize(Ast &ast);

  static void genAstMatrixAssignmUnknownThenKnown(Ast &ast);

  static void genAstMatrixAssignmentKnownThenUnknown(Ast &ast);

  static void genAstFullAssignmentToMatrix(Ast &ast);

  static void genAstMatrixAssignmIncludingPushBack(Ast &ast);

  static void genAstNestedLoopUnrollingLaplacianSharpeningFilterAllLoops(Ast &ast);

  static void genAstNestedLoopUnrollingLaplacianSharpeningFilterInnerLoopsWithNonStdWeights(Ast &ast);

  static void genAstPublicTurnedSecret(Ast &ast);

  static void genAstPublicTurnedSecretMatrix(Ast &ast);

  /** @} */ // End of astGenerators group

  static void genLaplacianInnerLoopsOnlyAstWithCustomWeights(Ast &ast, Matrix<int> *weights);
};

#endif //AST_OPTIMIZER_TEST_ASTTESTINGGENERATOR_H_
