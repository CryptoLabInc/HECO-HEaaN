// Trace file generated by SEAL
%0 = fhe.load_public_key {file=public_key_0.pk, parms = p_0.parms}
%1 = fhe.load_ctxt {file=encrpytion_1.ctxt, parms = p_1.parms}
fhe.invariant_noise_budget(%1)
fhe.decrypt(%1)
%2 = fhe.square(%1) {parms=p_1.parms} : <4096x2x2> -> <?x?x?>
%3 = fhe.load_plaintext {file=plaintext_3.ptxt}
%4 = fhe.add_plain(%2, %3) {parms=p_1.parms} : (<4096x2x2>,<1x?x1>) -> <?x?x?>
fhe.invariant_noise_budget(%4)
fhe.decrypt(%4)
%5 = fhe.load_plaintext {file=plaintext_5.ptxt}
%6 = fhe.add_plain(%1, %5) {parms=p_1.parms} : (<4096x2x2>,<1x?x1>) -> <?x?x?>
%7 = fhe.square(%6) {parms=p_1.parms} : <4096x2x2> -> <?x?x?>
fhe.invariant_noise_budget(%7)
fhe.decrypt(%7)
%8 = fhe.load_plaintext {file=plaintext_8.ptxt}
%9 = fhe.multiply_plain(%4, %8) {parms=p_1.parms} : (<4096x2x2>,<1x?x1>) -> <?x?x?>
%10 = fhe.multiply(%9, %7) {parms=p_1.parms} : (<4096x2x2>,<4096x2x2>) -> <?x?x?>
fhe.invariant_noise_budget(%10)
%11 = fhe.load_relin_keys(relin_keys_11.rk) {parms = p_0.parms}
%12 = fhe.square(%1) {parms=p_1.parms} : <4096x2x2> -> <?x?x?>
%13 = fhe.relinearize(%12,%11) {size=2, parms=p_1.parms} : (<4096x2x2>, RelinKeys) -> <?x?x?>
%14 = fhe.load_plaintext {file=plaintext_14.ptxt}
%15 = fhe.add_plain(%13, %14) {parms=p_1.parms} : (<4096x2x2>,<1x?x1>) -> <?x?x?>
fhe.invariant_noise_budget(%15)
fhe.decrypt(%15)
%16 = fhe.load_plaintext {file=plaintext_16.ptxt}
%17 = fhe.add_plain(%1, %16) {parms=p_1.parms} : (<4096x2x2>,<1x?x1>) -> <?x?x?>
%18 = fhe.square(%17) {parms=p_1.parms} : <4096x2x2> -> <?x?x?>
%19 = fhe.relinearize(%18,%11) {size=2, parms=p_1.parms} : (<4096x2x2>, RelinKeys) -> <?x?x?>
fhe.invariant_noise_budget(%19)
fhe.decrypt(%19)
%20 = fhe.load_plaintext {file=plaintext_20.ptxt}
%21 = fhe.multiply_plain(%15, %20) {parms=p_1.parms} : (<4096x2x2>,<1x?x1>) -> <?x?x?>
%22 = fhe.multiply(%21, %19) {parms=p_1.parms} : (<4096x2x2>,<4096x2x2>) -> <?x?x?>
%23 = fhe.relinearize(%22,%11) {size=2, parms=p_1.parms} : (<4096x2x2>, RelinKeys) -> <?x?x?>
fhe.invariant_noise_budget(%23)
fhe.decrypt(%23)
%24 = fhe.load_public_key {file=public_key_24.pk, parms = p_2.parms}
%25 = fhe.load_relin_keys(relin_keys_25.rk) {parms = p_2.parms}
%26 = fhe.load_ctxt {file=encrpytion_26.ctxt, parms = p_3.parms}
fhe.invariant_noise_budget(%26)
%27 = fhe.load_plaintext {file=plaintext_27.ptxt}
%28 = fhe.add_plain(%26, %27) {parms=p_3.parms} : (<8192x4x2>,<8192x?x1>) -> <?x?x?>
%29 = fhe.square(%28) {parms=p_3.parms} : <8192x4x2> -> <?x?x?>
%30 = fhe.relinearize(%29,%25) {size=2, parms=p_3.parms} : (<8192x4x2>, RelinKeys) -> <?x?x?>
fhe.invariant_noise_budget(%30)
fhe.decrypt(%30)
%31 = fhe.load_public_key {file=public_key_31.pk, parms = p_4.parms}
%32 = fhe.load_relin_keys(relin_keys_32.rk) {parms = p_4.parms}
%33 = fhe.load_ctxt {file=encrpytion_33.ctxt, parms = p_5.parms}
%34 = fhe.square(%33) {parms=p_5.parms} : <8192x4x2> -> <?x?x?>
%35 = fhe.relinearize(%34,%32) {size=2, parms=p_5.parms} : (<8192x4x2>, RelinKeys) -> <?x?x?>
fhe.decrypt(%35)
%36 = fhe.load_public_key {file=public_key_36.pk, parms = p_6.parms}
%37 = fhe.load_relin_keys(relin_keys_37.rk) {parms = p_6.parms}
%38 = fhe.load_ctxt {file=encrpytion_38.ctxt, parms = p_7.parms}
fhe.invariant_noise_budget(%38)
%39 = fhe.mod_switch_to_next(%38) {parms=p_7.parms}: (<8192x4x2>) -> <?x?x?>
fhe.invariant_noise_budget(%39)
%40 = fhe.mod_switch_to_next(%39) {parms=p_7.parms}: (<8192x4x2>) -> <?x?x?>
fhe.invariant_noise_budget(%40)
%41 = fhe.mod_switch_to_next(%40) {parms=p_7.parms}: (<8192x4x2>) -> <?x?x?>
fhe.invariant_noise_budget(%41)
fhe.decrypt(%41)
%42 = fhe.load_ctxt {file=encrpytion_42.ctxt, parms = p_7.parms}
fhe.invariant_noise_budget(%42)
%43 = fhe.square(%42) {parms=p_7.parms} : <8192x4x2> -> <?x?x?>
%44 = fhe.relinearize(%43,%37) {size=2, parms=p_7.parms} : (<8192x4x2>, RelinKeys) -> <?x?x?>
fhe.invariant_noise_budget(%44)
%45 = fhe.square(%44) {parms=p_7.parms} : <8192x4x2> -> <?x?x?>
%46 = fhe.relinearize(%45,%37) {size=2, parms=p_7.parms} : (<8192x4x2>, RelinKeys) -> <?x?x?>
fhe.invariant_noise_budget(%46)
%47 = fhe.mod_switch_to_next(%46) {parms=p_7.parms}: (<8192x4x2>) -> <?x?x?>
fhe.invariant_noise_budget(%47)
%48 = fhe.square(%47) {parms=p_7.parms} : <8192x4x2> -> <?x?x?>
%49 = fhe.relinearize(%48,%37) {size=2, parms=p_7.parms} : (<8192x4x2>, RelinKeys) -> <?x?x?>
fhe.invariant_noise_budget(%49)
%50 = fhe.mod_switch_to_next(%49) {parms=p_7.parms}: (<8192x4x2>) -> <?x?x?>
fhe.invariant_noise_budget(%50)
fhe.decrypt(%50)
%51 = fhe.load_public_key {file=public_key_51.pk, parms = p_8.parms}
%52 = fhe.load_relin_keys(relin_keys_52.rk) {parms = p_8.parms}
%53 = fhe.load_galois_keys(galois_keys_53.rk) {parms = p_8.parms}
%54 = fhe.load_ctxt {file=encrpytion_54.ctxt, parms = p_9.parms}
%55 = fhe.square(%54) {parms=p_9.parms} : <8192x3x2> -> <?x?x?>
%56 = fhe.relinearize(%55,%52) {size=2, parms=p_9.parms} : (<8192x3x2>, RelinKeys) -> <?x?x?>
%57 = fhe.rescale_to_next(%56) {parms=p_9.parms}: (<8192x3x2>) -> <?x?x?>
%58 = fhe.load_plaintext {file=plaintext_58.ptxt}
%59 = fhe.multiply_plain(%54, %58) {parms=p_9.parms} : (<8192x3x2>,<24576x?x1>) -> <?x?x?>
%60 = fhe.rescale_to_next(%59) {parms=p_9.parms}: (<8192x3x2>) -> <?x?x?>
%61 = fhe.multiply(%57, %60) {parms=p_9.parms} : (<8192x3x2>,<8192x3x2>) -> <?x?x?>
%62 = fhe.relinearize(%61,%52) {size=2, parms=p_9.parms} : (<8192x3x2>, RelinKeys) -> <?x?x?>
%63 = fhe.rescale_to_next(%62) {parms=p_9.parms}: (<8192x3x2>) -> <?x?x?>
%64 = fhe.load_plaintext {file=plaintext_64.ptxt}
%65 = fhe.multiply_plain(%54, %64) {parms=p_9.parms} : (<8192x3x2>,<24576x?x1>) -> <?x?x?>
%66 = fhe.rescale_to_next(%65) {parms=p_9.parms}: (<8192x3x2>) -> <?x?x?>
%67 = fhe.mod_switch(%66)  {parms=p_9.parms, target_parms=p_9.parms}: (<8192x3x2>) -> <?x?x?>
// mod_switch on plaintext (info output only, not tracked in tracing)
%68 = fhe.add(%63, %67) {parms=p_9.parms} : (<8192x3x2>,<8192x3x2>) -> <?x?x?>
%69 = fhe.load_plaintext {file=plaintext_69.ptxt}
%70 = fhe.add_plain(%68, %69) {parms=p_9.parms} : (<8192x3x2>,<24576x?x1>) -> <?x?x?>
fhe.decrypt(%70)
%71 = fhe.load_public_key {file=public_key_71.pk, parms = p_2.parms}
%72 = fhe.load_relin_keys(relin_keys_72.rk) {parms = p_2.parms}
%73 = fhe.load_ctxt {file=encrpytion_73.ctxt, parms = p_3.parms}
fhe.invariant_noise_budget(%73)
%74 = fhe.load_galois_keys(galois_keys_74.rk) {parms = p_2.parms}
%75 = fhe.rotate(%73,%74) {steps=3, parms=p_3.parms} : (<8192x4x2>, GaloisKeys) -> <?x?x?>
fhe.invariant_noise_budget(%75)
fhe.decrypt(%75)
%76 = fhe.apply_galois(%75,%74) {steps=16383, parms=p_3.parms} : (<8192x4x2>, GaloisKeys) -> <?x?x?>
fhe.invariant_noise_budget(%76)
fhe.decrypt(%76)
%77 = fhe.rotate(%76,%74) {steps=4294967292, parms=p_3.parms} : (<8192x4x2>, GaloisKeys) -> <?x?x?>
fhe.invariant_noise_budget(%77)
fhe.decrypt(%77)
%78 = fhe.load_public_key {file=public_key_78.pk, parms = p_4.parms}
%79 = fhe.load_relin_keys(relin_keys_79.rk) {parms = p_4.parms}
%80 = fhe.load_galois_keys(galois_keys_80.rk) {parms = p_4.parms}
%81 = fhe.load_ctxt {file=encrpytion_81.ctxt, parms = p_5.parms}
%82 = fhe.rotate(%81,%80) {steps=2, parms=p_5.parms} : (<8192x4x2>, GaloisKeys) -> <?x?x?>
fhe.decrypt(%82)