name: build_run_tests

on: [ push ]

jobs:
  setup-mlir:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout MLIR source
        uses: actions/checkout@v2
        with:
          repository: MarbleHE/llvm-project
          path: llvm
      - name: Generate short commit hash
        id: commit_hash
        run: |
          cd llvm && echo ::set-output name=sha_short::$(git rev-parse --short=8 HEAD)
      - uses: actions/cache@v2
        id: cache
        with:
          path: llvm/build
          key: mlir-${{ steps.commit_hash.outputs.sha_short }} 
      - name: Update apt
        if: steps.cache.outputs.cache-hit != 'true'
        run: sudo apt-get update
      - name: Apt install requirements
        if: steps.cache.outputs.cache-hit != 'true'
        run: sudo apt-get install -y ninja-build build-essential cmake
      - name: Configure MLIR
        if: steps.cache.outputs.cache-hit != 'true'
        run: mkdir llvm/build && cd llvm/build &&  cmake -G Ninja ../llvm -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_BUILD_EXAMPLES=ON -DLLVM_TARGETS_TO_BUILD="X86" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON
      - name: Build MLIR
        if: steps.cache.outputs.cache-hit != 'true'
        run: cmake --build llvm/build

  build-ubuntu:
    needs: setup-mlir
    runs-on: ubuntu-latest
    steps:
      - name: update apt-get sources
        run: sudo apt-get update
      - name: install gcc-9
        run: sudo apt-get install -y gcc-9 g++-9 build-essential libboost-all-dev python3-dev python3-pip cmake
      - name: Checkout MLIR source
        uses: actions/checkout@v2
        with:
          repository: MarbleHE/llvm-project
          path: llvm
      - name: Generate short commit hash for MLIR
        id: commit_hash_mlir
        run: |
          cd llvm && echo ::set-output name=sha_short::$(git rev-parse --short=8 HEAD)
      - uses: actions/cache@v2
        id: cache
        with:
          path: llvm/build
          key: mlir-${{ steps.commit_hash_mlir.sha_short }}
      - uses: actions/checkout@v2
        with:
          path: HECO
      - name: Generate short commit hash
        id: vars
        run: |
          cd HECO && echo ::set-output name=sha_short::$(git rev-parse --short=8 ${{ github.sha }})
      - name: configure
        run: mkdir HECO/build && cd HECO/build && cmake -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_C_COMPILER=gcc-9 -DMLIR_DIR=../../llvm/build/lib/cmake/mlir ..
      - name: build
        run: cmake --build HECO/build --target testing-all
      - name: test
        run: cd HECO/build && ctest
      - name: Send message to Slack if build job failed
        if: ${{ failure() }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: github-batching-compiler
          status: Building ABC using gcc on Ubuntu failed!
          color: warning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
      - name: Generate short commit hash
        id: vars
        run: |
          echo ::set-output name=sha_short::$(git rev-parse --short=8 ${{ github.sha }})
      - name: configure
        run: mkdir build && cd build && cmake -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang ..
      - name: build
        run: cmake --build build --target testing-all
      - name: test
        run: cd build && ctest
      - name: Send message to Slack if build job failed
        if: ${{ failure() }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: github-batching-compiler
          status: Building ABC using clang on macOS failed!
          color: warning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
      - name: Generate short commit hash
        id: vars
        run: |
          echo ::set-output name=sha_short::$(git rev-parse --short=8 ${{ github.sha }})
      - name: configure
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          md build
          cd build
          cmake -DCMAKE_CXX_FLAGS="/W4 /WX" -G "NMake Makefiles" ..
      - name: build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake --build build --target testing-all
      - name: test
        shell: cmd
        run: cd build && ctest
      - name: Send message to Slack if build job failed
        if: ${{ failure() }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: github-batching-compiler
          status: Building ABC using MSVSC on Windows failed!
          color: warning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}
